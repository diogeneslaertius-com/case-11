import pandas as pd
import random
import sys # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–¥–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–µ–¥–∞ –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
TRAVEL_CATS = {'–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–û—Ç–µ–ª–∏', '–¢–∞–∫—Å–∏', '–ü–æ–µ–∑–¥–∞', '–°–∞–º–æ–ª–µ—Ç—ã'}
ONLINE_CATS = {'–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', '–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', '–ï–¥–∏–º –¥–æ–º–∞', '–ö–∏–Ω–æ', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'}
RESTAURANT_CATS = {'–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'}
JEWELRY_CATS = {'–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è'}
PERFUME_CATS = {'–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è'}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def monthly_sum(group, cats):
    return group.loc[group['category'].isin(cats), 'amount'].sum() / 3.0

def total_monthly_spending(group):
    return group['amount'].sum().sum() / 3.0 # Sum across all rows and then divide by 3

def top3_categories_monthly(group):
    s = group.groupby('category')['amount'].sum().sort_values(ascending=False)
    top3 = s.head(3) / 3.0
    return list(top3.index), top3.sum()

def monthly_fx_volume(tr_group):
    fx_types = {'fx_buy', 'fx_sell'}
    return tr_group.loc[tr_group['type'].isin(fx_types), 'amount'].sum() / 3.0

def monthly_cash_card_transfers(tr_group):
    types = {'p2p_out', 'card_out', 'atm_withdrawal'}
    return tr_group.loc[tr_group['type'].isin(types), 'amount'].sum() / 3.0

def relevance_cash_loan(tg, tr_group):
    debt_types = {'loan_payment_out', 'cc_repayment_out', 'installment_payment_out'}
    debts = tr_group.loc[tr_group['type'].isin(debt_types), 'amount'].sum() / 3.0
    total = tg['amount'].sum().sum() / 3.0 # Sum across all rows and then divide by 3
    ratio = debts / max(total, 1)
    return ratio >= 0.2

# === –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–≥–æ–¥—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º ===
def calc_benefits(tg, trg, avg_balance):
    benefits = {}
    ctx = {}

    total_spending = total_monthly_spending(tg)

    # –ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    travel_taxi = monthly_sum(tg, TRAVEL_CATS)
    benefits['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] = 0.04 * travel_taxi
    travel_percentage = (travel_taxi / max(total_spending, 1)) * 100
    ctx['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'] = {'travel_taxi': travel_taxi, 'travel_percentage': round(travel_percentage)}


    # –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
    restaurants = monthly_sum(tg, RESTAURANT_CATS)
    jewelry = monthly_sum(tg, JEWELRY_CATS)
    perfume = monthly_sum(tg, PERFUME_CATS)
    boosted = restaurants + jewelry + perfume
    other = max(tg['amount'].sum().sum()/3 - boosted, 0) # Sum across all rows and then divide by 3
    if avg_balance >= 6_000_000: rate = 0.04
    elif avg_balance >= 1_000_000: rate = 0.03
    else: rate = 0.02
    cashback = rate * other + 0.04 * boosted
    cashback = min(cashback, 100_000)
    fee_saving = min(0.002 * monthly_cash_card_transfers(trg), 3_000)
    benefits['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] = cashback + fee_saving
    ctx['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'] = {'cashback': cashback}

    # –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
    top3_names, top3_sum = top3_categories_monthly(tg)
    online = monthly_sum(tg, ONLINE_CATS)
    benefits['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] = 0.07 * top3_sum + 0.10 * online
    ctx['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'] = {'top3': top3_names}

    # –û–±–º–µ–Ω –≤–∞–ª—é—Ç
    fx_vol = monthly_fx_volume(trg)
    benefits['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] = 0.003 * fx_vol
    ctx['–û–±–º–µ–Ω –≤–∞–ª—é—Ç'] = {'fx_curr': 'USD', 'fx_vol': fx_vol}

    # –î–µ–ø–æ–∑–∏—Ç—ã
    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –æ—Å—Ç–∞—Ç–∫–µ
    if avg_balance > 100000:
        benefits['–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π'] = (avg_balance * 0.145) / 12.0
        benefits['–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π'] = (avg_balance * 0.165) / 12.0
        benefits['–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π'] = (avg_balance * 0.155) / 12.0
    else:
        benefits['–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π'] = 0
        benefits['–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π'] = 0
        benefits['–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π'] = 0


    # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
    if avg_balance > 500000:
        benefits['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = avg_balance * 0.005 # –£—Å–ª–æ–≤–Ω–∞—è –≤—ã–≥–æ–¥–∞
    else:
        benefits['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'] = 0

    # –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏
    if relevance_cash_loan(tg, trg):
        benefits['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏'] = 1 # –£—Å–ª–æ–≤–Ω–∞—è –≤—ã–≥–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å
    else:
        benefits['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏'] = 0

    # –ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ –ø—Ä–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
    if avg_balance > 10000000:
         benefits['–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏'] = avg_balance * 0.001 # –£—Å–ª–æ–≤–Ω–∞—è –≤—ã–≥–æ–¥–∞
    else:
         benefits['–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏'] = 0


    return benefits, ctx

# === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—É—à–µ–π ===
# Adding age-specific variations
push_templates = {
    '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': {
        'young': ["{name}, –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫/—Ç–∞–∫—Å–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ? üöó –° —Ç—Ä–µ–≤–µ–ª-–∫–∞—Ä—Ç–æ–π —á–∞—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –±—ã –∫–µ—à–±—ç–∫–æ–º. –•–æ—á–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å?",
                  "{name}, –≤–∂—É—Ö-–≤–∂—É—Ö –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –≤ –ø–æ–µ–∑–¥–∫–∏? ‚úàÔ∏è –í–µ—Ä–Ω–∏ —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥ —Å —Ç—Ä–µ–≤–µ–ª-–∫–∞—Ä—Ç–æ–π!"],
        'adult': ["{name}, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É –≤–∞—Å –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫/—Ç–∞–∫—Å–∏. –° —Ç—Ä–µ–≤–µ–ª-–∫–∞—Ä—Ç–æ–π —á–∞—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –±—ã –∫–µ—à–±—ç–∫–æ–º. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å?"],
        'senior': ["{name}, –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —É –≤–∞—Å –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫/—Ç–∞–∫—Å–∏. –° —Ç—Ä–µ–≤–µ–ª-–∫–∞—Ä—Ç–æ–π —á–∞—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –±—ã –∫–µ—à–±—ç–∫–æ–º. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å?"]
    },
    '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': {
         'young': ["{name}, –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ + –ª—é–±–∏—à—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã? ‚ú® –ü—Ä–µ–º–∏—É–º-–∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç —Ç–æ–ø –∫–µ—à–±—ç–∫ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è!",
                   "{name}, –±–∞–ª–∞–Ω—Å –≤ –ø–ª—é—Å–µ –∏ —Ü–µ–Ω–∏—à—å –∫–æ–º—Ñ–æ—Ä—Ç? –ü—Ä–µ–º–∏—É–º-–∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–µ–±—è. üòâ"],
         'adult': ["{name}, —É –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —Ç—Ä–∞—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–µ—à–±—ç–∫ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è. –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å."],
         'senior': ["{name}, —É –≤–∞—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ –∫—Ä—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —Ç—Ä–∞—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—Å—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫–µ—à–±—ç–∫ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–Ω—è—Ç–∏—è. –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å."]
    },
    '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': {
        'young': ["{name}, —Ç–≤–æ–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cat1}, {cat2}, {cat3}. üî• –ö—Ä–µ–¥–∏—Ç–∫–∞ –¥–∞—Å—Ç –¥–æ 10% –∫–µ—à–±—ç–∫–∞ –∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã!",
                  "{name}, –∑–∞–ª–∏–ø–∞–µ—à—å –≤ {cat1} –∏–ª–∏ {cat2}? –ö—Ä–µ–¥–∏—Ç–∫–∞ –≤–µ—Ä–Ω–µ—Ç —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥ + —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –µ—Å—Ç—å! üòé"],
        'adult': ["{name}, –≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cat1}, {cat2}, {cat3}. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—ë—Ç –¥–æ 10% –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É."],
        'senior': ["{name}, –≤–∞—à–∏ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cat1}, {cat2}, {cat3}. –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–∞—ë—Ç –¥–æ 10% –≤ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É."]
    },
    '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': {
        'young': ["{name}, —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—à—å –≤–∞–ª—é—Ç—É? üí± –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç–æ–ø-–∫—É—Ä—Å –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞!",
                  "{name}, –Ω—É–∂–µ–Ω –±–∞–∫—Å –∏–ª–∏ –µ–≤—Ä–æ? –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–≥–æ–¥–Ω–æ –∏ –±–µ–∑ –∑–∞–º–æ—Ä–æ—á–µ–∫. üëá"],
        'adult': ["{name}, –≤—ã —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç–µ –≤–∞–ª—é—Ç—É. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞. –û—Ç–∫—Ä—ã—Ç—å."],
        'senior': ["{name}, –≤—ã —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç–µ –≤–∞–ª—é—Ç—É. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å –∏ –∞–≤—Ç–æ-–ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞. –û—Ç–∫—Ä—ã—Ç—å."]
    },
    '–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π': {
        'young': ["{name}, –¥—É–º–∞–µ—à—å –æ –≤–∫–ª–∞–¥–∞—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö? ü§î –ù–∞—à –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç–µ–±—è. –û—Ç–∫—Ä—ã—Ç—å.",
                  "{name}, —Ö–æ—á–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö? –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî –∏–∑–∏ —Ä–µ—à–µ–Ω–∏–µ. ‚úÖ"],
        'adult': ["{name}, –¥—É–º–∞–µ—Ç–µ –æ –≤–∫–ª–∞–¥–∞—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö? –ù–∞—à –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –≤–∞—Å. –û—Ç–∫—Ä—ã—Ç—å."],
        'senior': ["{name}, –¥—É–º–∞–µ—Ç–µ –æ –≤–∫–ª–∞–¥–∞—Ö –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö? –ù–∞—à –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –≤–∞—Å. –û—Ç–∫—Ä—ã—Ç—å."]
    },
    '–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': {
        'young': ["{name}, —Å–≤–æ–±–æ–¥–Ω—ã–µ {balance} ‚Ç∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å 16,5% –≥–æ–¥–æ–≤—ã—Ö. üí∞ –û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥!",
                  "{name}, –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ {balance} ‚Ç∏? –ü—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–¥ 16,5%! üí™"],
        'adult': ["{name}, —Å–≤–æ–±–æ–¥–Ω—ã–µ {balance} ‚Ç∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å 16,5% –≥–æ–¥–æ–≤—ã—Ö. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥."],
        'senior': ["{name}, —Å–≤–æ–±–æ–¥–Ω—ã–µ {balance} ‚Ç∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å 16,5% –≥–æ–¥–æ–≤—ã—Ö. –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥."]
    },
    '–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': {
        'young': ["{name}, –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏? üìà –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–º–æ–∂–µ—Ç –∏—Ö –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å. –î–∞–≤–∞–π!",
                  "{name}, —Ö–æ—á–µ—à—å –∫–æ–ø–∏—Ç—å –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç? –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. üëá"],
        'adult': ["{name}, —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞? –î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ–∂–µ—Ç –∏—Ö –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å. –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç."],
        'senior': ["{name}, —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞? –î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ–∂–µ—Ç –∏—Ö –ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å. –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç."]
    },
    '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': {
        'young': ["{name}, —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞–ª–∏? üöÄ –ù–∞—á–Ω–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ –ø–µ—Ä–≤—ã–π –≥–æ–¥!",
                  "{name}, –¥—É–º–∞–µ—à—å –ø—Ä–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏? –°—Ç–∞—Ä—Ç—É–π —Å –Ω–∞–º–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç! üëá"],
        'adult': ["{name}, —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞–ª–∏? –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞–º–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ –ø–µ—Ä–≤—ã–π –≥–æ–¥. –ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å."],
        'senior': ["{name}, —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞–ª–∏? –ù–∞—á–Ω–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞–º–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ –ø–µ—Ä–≤—ã–π –≥–æ–¥. –ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å."]
    },
    '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': {
        'young': ["{name}, –Ω—É–∂–Ω–∞ –¥–æ–ø —Å—É–º–º–∞? üí∏ –û—Ñ–æ—Ä–º–∏ –∫—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –≥–µ–º–æ—Ä—Ä–∞!",
                  "{name}, –±–∞–±–∫–∏ –Ω—É–∂–Ω—ã —Å—Ä–æ—á–Ω–æ? –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –±–µ–∑ –∑–∞–ª–æ–≥–∞ –∏ —Å–ø—Ä–∞–≤–æ–∫. –ñ–º–∏! üëâ"],
        'adult': ["{name}, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞? –û—Ñ–æ—Ä–º–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –∑–∞–ª–æ–≥–∞ –∏ —Å–ø—Ä–∞–≤–æ–∫. –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç."],
        'senior': ["{name}, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞? –û—Ñ–æ—Ä–º–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –∑–∞–ª–æ–≥–∞ –∏ —Å–ø—Ä–∞–≤–æ–∫. –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç."]
    },
    '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏': {
         'young': ["{name}, —à–∞—Ä–∏—à—å –∑–∞ –∫—Ä–∏–ø—Ç—É... –∞ –∫–∞–∫ –Ω–∞—Å—á–µ—Ç –∑–æ–ª–æ—Ç–∞? ‚ú® –ö—É–ø–∏ —Å–ª–∏—Ç–∫–∏ 999,9 –ø—Ä–æ–±—ã –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ!",
                   "{name}, —Ö–æ—á–µ—à—å –≤–ª–æ–∂–∏—Ç—å—Å—è –≤–æ —á—Ç–æ-—Ç–æ –Ω–∞–¥–µ–∂–Ω–æ–µ? –ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ ‚Äî –∫–ª–∞—Å—Å–∏–∫–∞. üëë"],
         'adult': ["{name}, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏? –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ 999,9 –ø—Ä–æ–±—ã –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ. –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç–æ."],
         'senior': ["{name}, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏? –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏ 999,9 –ø—Ä–æ–±—ã –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ. –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç–æ."]
    }
}


#–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—à–∞ —Å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
def make_push(name, product, ctx, avg_balance, age):
    # –≤–æ–∑—Ä–∞—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –Ω–µ–º—É
    if age is not None:
        if age <= 30:
            age_group = 'young'
        elif age >= 40:
            age_group = 'senior'
        else:
            age_group = 'adult'
    else:
        age_group = 'adult' # Default if age is unknown

    templates = push_templates.get(product, {}).get(age_group)
    if not templates:
        templates = push_templates.get(product, {}).get('adult')
        if not templates:
             # —Ñ–æ–ª–±—ç–∫–∏
             return f"{name}, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏."

    tpl = random.choice(templates)
    try:
        # Format numbers with space as thousand separator and comma as decimal separator
        formatted_balance = f"{avg_balance:,.0f}".replace(",", " ")
        # Additional formatting for categories if needed, though they are strings
        cat1 = ctx.get('top3', ['‚Äî','‚Äî','‚Äî'])[0]
        cat2 = ctx.get('top3', ['‚Äî','‚Äî','‚Äî'])[1]
        cat3 = ctx.get('top3', ['‚Äî','‚Äî','‚Äî'])[2]

        return tpl.format(
            name=name,
            # Removed sum_taxi and travel_percentage as they are not in new template
            cat1=cat1,
            cat2=cat2,
            cat3=cat3,
            fx_curr=ctx.get('fx_curr', '–≤–∞–ª—é—Ç–µ'),
            balance=formatted_balance # Use formatted balance
        )
    except KeyError as e:
        print(f"Error formatting push for product {product} for age group {age_group}: Missing key {e}")
        return f"{name}, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏."
    except ValueError as e:
         print(f"Error formatting push for product {product} for age group {age_group}: {e}")
         return f"{name}, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏."


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ 60 –∫–ª–∏–µ–Ω—Ç–∞–º 
rows = []
used_pushes = set()

# Load clients data
try:
    clients_df = pd.read_csv('clients.csv')
    clients_df.set_index('client_code', inplace=True)
except FileNotFoundError:
    print("Clients file not found. Cannot use client status or age for prioritization/personalization.")
    clients_df = pd.DataFrame() # Create empty DataFrame to avoid errors


for i in range(1, 61):
    tx_file = f"client_{i}_transactions_3m.csv"
    tr_file = f"client_{i}_transfers_3m.csv"

    try:
        tg = pd.read_csv(tx_file)
        trg = pd.read_csv(tr_file)
    except FileNotFoundError:
        print(f"Files not found for client {i}. Skipping.")
        continue

    name = tg['name'].iloc[0]
    avg_balance = tg['avg_monthly_balance_KZT'].iloc[0] if 'avg_monthly_balance_KZT' in tg.columns else 0
    client_status = clients_df.loc[i, 'status'] if i in clients_df.index else None
    client_age = clients_df.loc[i, 'age'] if i in clients_df.index else None # Get client age


    benefits, ctx = calc_benefits(tg, trg, avg_balance)
    filtered = {k: v for k, v in benefits.items() if v > 0}

    # –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –≤—ã–±–æ—Ä–∫–∏ –≤ N –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä

    best_product = None
    if filtered:
        sorted_benefits = sorted(filtered.items(), key=lambda item: item[1], reverse=True)
        top_n_products = [item[0] for item in sorted_benefits[:4]] # Consider top 4 for prioritization

        # benefit rank and client status
        product_weights = {}
        for rank, product in enumerate(top_n_products):
            weight = (4 - rank) # —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–∞ –∏ —ç–∫—Å—Ç—Ä–∞ –≤–µ—Å–∞ –∫–æ–Ω–µ—á–Ω–æ –Ω–µ–ª—å–∑—è —Ç–∞–∫ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –Ω–æ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ –º–æ–∂–Ω–æ –¥—É–º–∞—é :D
            if client_status == '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç' and product in ['–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']:
                 weight += 2
            elif client_status == '–°—Ç—É–¥–µ–Ω—Ç' and product in ['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']:
                 weight += 2
            elif client_status == '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç' and product in ['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π']:
                 weight += 1

            product_weights[product] = weight

        # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
        available_products = [p for p in product_weights.keys() if p in push_templates and (push_templates[p].get('young') or push_templates[p'].get('adult') or push_templates[p].get('senior'))]

        if available_products:
            # Select product based on weights
            best_product = random.choices(
                available_products,
                weights=[product_weights[p] for p in available_products],
                k=1
            )[0]
        elif top_n_products:
             # —Ñ–æ–ª–±—ç–∫–∏ —á—Ç–æ–±—ã –¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
             best_product = sorted_benefits[0][0]
        else:
             best_product = max(benefits, key=benefits.get) # Select product with highest nominal benefit


    else:
        # —Ñ–æ–ª–±—ç–∫ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫ –ø—Ä–∏–º–µ—Ä—É –≤—ã–±–∏—Ä–∞–µ–º –∑–¥–µ—Å—å –≤—ã—Å—à–∏–π benefit
        best_product = max(benefits, key=benefits.get)

    push = make_push(name, best_product, ctx.get(best_product, {}), avg_balance, client_age) # client_age

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—à–∞ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
    attempts = 0
    initial_push = push
    while push in used_pushes and attempts < 3:
        push = make_push(name, best_product, ctx.get(best_product, {}), avg_balance, client_age)
        if push == initial_push: # Prevent infinite loop if only one template for age group
             break
        attempts += 1

    used_pushes.add(push)
    rows.append({'client_code': i, 'product': best_product, 'push_notification': push})

out = pd.DataFrame(rows)
out.to_csv('solution_case1_all_clients.csv', index=False)
#–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è –∫–æ–ª–∞–±–∞ –µ—Å–ª–∏ —Ç–∞–º –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è
if 'google.colab' in sys.modules:
    display(out)
else:
    print(out.to_string())
# –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–∑—è—â–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!
print("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª solution_case1_all_clients.csv –æ–±–Ω–æ–≤–ª–µ–Ω.")
# ----- –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º @fadeinvoid -----
